import unittest
import luigi

from mortar.luigi import redshift

class TestRedshift(unittest.TestCase):
    def test_get_column_definitions_from_pig_schema__int(self):
        int_schema = '{"fields":[{"name":"user","type":10,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        int_redshift_columns = redshift.get_column_definitions_from_pig_schema(int_schema)

        self.assertEquals(1, len(int_redshift_columns))
        self.assertEquals(('user', 'integer'), int_redshift_columns[0])

    def test_get_column_definitions_from_pig_schema__float(self):
        float_schema = '{"fields":[{"name":"user","type":20,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        float_redshift_columns = redshift.get_column_definitions_from_pig_schema(float_schema)

        self.assertEquals(1, len(float_redshift_columns))
        self.assertEquals(('user', 'float8'), float_redshift_columns[0])

    def test_get_column_definitions_from_pig_schema__chararray(self):
        chararray_schema = '{"fields":[{"name":"user","type":55,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        chararray_redshift_columns = redshift.get_column_definitions_from_pig_schema(chararray_schema)

        self.assertEquals(1, len(chararray_redshift_columns))
        self.assertEquals(('user', 'varchar(max)'), chararray_redshift_columns[0])

    def test_get_column_definitions_from_pig_schema__multiple_columns(self):
        simple_schema = '{"fields":[{"name":"user","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"item","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"weight","type":25,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        simple_redshift_columns = redshift.get_column_definitions_from_pig_schema(simple_schema)

        self.assertEquals(3, len(simple_redshift_columns))
        self.assertEquals(('user', 'varchar(max)'), simple_redshift_columns[0])
        self.assertEquals(('item', 'varchar(max)'), simple_redshift_columns[1])
        self.assertEquals(('weight', 'float8'), simple_redshift_columns[2])

    def test_get_column_definitions_from_pig_schema__join_result(self):
        join_schema = '{"fields":[{"name":"purchase_signals::user","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"purchase_signals::item","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"purchase_signals::weight","type":25,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"wishlist_signals::user","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"wishlist_signals::item","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"wishlist_signals::weight","type":25,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        join_redshift_columns = redshift.get_column_definitions_from_pig_schema(join_schema)

        self.assertEquals(6, len(join_redshift_columns))
        self.assertEquals(('purchase_signals_user', 'varchar(max)'), join_redshift_columns[0])
        self.assertEquals(('purchase_signals_item', 'varchar(max)'), join_redshift_columns[1])
        self.assertEquals(('purchase_signals_weight', 'float8'), join_redshift_columns[2])
        self.assertEquals(('wishlist_signals_user', 'varchar(max)'), join_redshift_columns[3])
        self.assertEquals(('wishlist_signals_item', 'varchar(max)'), join_redshift_columns[4])
        self.assertEquals(('wishlist_signals_weight', 'float8'), join_redshift_columns[5])
        
        join_redshift_columns = redshift.get_column_definitions_from_pig_schema(join_schema, alias_depth=0)
        self.assertEquals(6, len(join_redshift_columns))
        self.assertEquals(('user', 'varchar(max)'), join_redshift_columns[0])
        self.assertEquals(('item', 'varchar(max)'), join_redshift_columns[1])
        self.assertEquals(('weight', 'float8'), join_redshift_columns[2])
        self.assertEquals(('user', 'varchar(max)'), join_redshift_columns[3])
        self.assertEquals(('item', 'varchar(max)'), join_redshift_columns[4])
        self.assertEquals(('weight', 'float8'), join_redshift_columns[5])

    def test_get_column_definitions_from_pig_schema__multiple_joins(self):
        multi_join_schema = '{"fields":[{"name":"some_other_table::purchase_signals::user","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"some_other_table::purchase_signals::item","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"purchase_signals::weight","type":25,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"wishlist_signals::user","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"wishlist_signals::item","type":55,"description":"autogenerated from Pig Field Schema","schema":null},{"name":"wishlist_signals::weight","type":25,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        multi_join_redshift_columns = redshift.get_column_definitions_from_pig_schema(multi_join_schema)

        self.assertEquals(6, len(multi_join_redshift_columns))
        self.assertEquals(('purchase_signals_user', 'varchar(max)'), multi_join_redshift_columns[0])
        self.assertEquals(('purchase_signals_item', 'varchar(max)'), multi_join_redshift_columns[1])
        self.assertEquals(('purchase_signals_weight', 'float8'), multi_join_redshift_columns[2])
        self.assertEquals(('wishlist_signals_user', 'varchar(max)'), multi_join_redshift_columns[3])
        self.assertEquals(('wishlist_signals_item', 'varchar(max)'), multi_join_redshift_columns[4])
        self.assertEquals(('wishlist_signals_weight', 'float8'), multi_join_redshift_columns[5])
        
        multi_join_redshift_columns = redshift.get_column_definitions_from_pig_schema(multi_join_schema, alias_depth=2)
        self.assertEquals(6, len(multi_join_redshift_columns))
        self.assertEquals(('some_other_table_purchase_signals_user', 'varchar(max)'), multi_join_redshift_columns[0])
        self.assertEquals(('some_other_table_purchase_signals_item', 'varchar(max)'), multi_join_redshift_columns[1])
        self.assertEquals(('purchase_signals_weight', 'float8'), multi_join_redshift_columns[2])
        self.assertEquals(('wishlist_signals_user', 'varchar(max)'), multi_join_redshift_columns[3])
        self.assertEquals(('wishlist_signals_item', 'varchar(max)'), multi_join_redshift_columns[4])
        self.assertEquals(('wishlist_signals_weight', 'float8'), multi_join_redshift_columns[5])

    def test_get_column_definitions_from_pig_schema__unsupported(self):
        bad_schema = '{"fields":[{"name":"user","type":100,"description":"autogenerated from Pig Field Schema","schema":null}],"version":0,"sortKeys":[],"sortKeyOrders":[]}'
        self.assertRaises(Exception, redshift.get_column_definitions_from_pig_schema, bad_schema)

